apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'com.google.gms.google-services'
apply plugin: 'io.fabric'
String applicationName = 'accident_management'
android {
    compileSdkVersion 29
    buildToolsVersion "29.0.3"

    defaultConfig {
        applicationId "com.yunjaena.seller"
        compileSdkVersion project.compileSdkVersion
        minSdkVersion project.minSdkVersion
        targetSdkVersion project.targetSdkVersion
        versionCode 10000
        versionName "1.0.0"
        vectorDrawables.useSupportLibrary = true
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        multiDexEnabled true
    }

    lintOptions {
        checkReleaseBuilds false
        abortOnError false
    }

    signingConfigs {
        release {
            storeFile file("./delivery_service.jks")
            storePassword getPassword()
            keyAlias "delivery_service"
            keyPassword getPassword()
        }
    }

    buildTypes {
        debug {
            debuggable true
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            buildConfigField "boolean", "IS_DEBUG", "true"
        }

        release {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            buildConfigField "boolean", "IS_DEBUG", "false"
            signingConfig signingConfigs.release
        }
    }

    compileOptions {
        sourceCompatibility 1.8
        targetCompatibility 1.8
    }

    applicationVariants.all { variant ->
        variant.outputs.all {
            outputFileName = "${applicationName}_v${defaultConfig.versionName}_${variant.buildType.name}.apk"
        }
    }
}

def getPassword() {
    try {
        def stringsFile = file("./src/main/res/values/keys.xml")
        return new XmlParser().parse(stringsFile).string.find {
            it.@name.equals 'delivery_service'
        }.text()
    } catch (e) {
        println(e)
        return ""
    }
}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    implementation project(':core')
    implementation 'com.google.guava:guava:29.0-android'
    /* Dependency - glide */
    implementation project.glide
    implementation 'androidx.legacy:legacy-support-v4:1.0.0'
    annotationProcessor project.glideAnnotation
    /* Dependency - butterknife */
    implementation project.butterknife
    annotationProcessor project.butterknifeAnnotation

    /* Test core library */
    androidTestImplementation 'androidx.test:core:1.0.0'
    /* AndroidJUnitRunner and JUnit Rules */
    androidTestImplementation 'androidx.test:runner:1.1.0'
    androidTestImplementation 'androidx.test:rules:1.1.0'
    /*  Assertions */
    testImplementation 'androidx.test.ext:junit:1.1.0'
    androidTestImplementation 'androidx.test.ext:junit:1.0.0'
    androidTestImplementation 'androidx.test.ext:truth:1.0.0'
    androidTestImplementation 'com.google.truth:truth:0.42'
    /*  Espresso dependencies */
    androidTestImplementation('androidx.test.espresso:espresso-core:3.2.0') {
        exclude group: 'com.android.support', module: 'support-annotations'
        exclude group: 'com.google.code.findbugs'
    }
    androidTestImplementation 'androidx.test.espresso:espresso-contrib:3.2.0'
    androidTestImplementation 'androidx.test.espresso:espresso-intents:3.2.0'
    androidTestImplementation 'androidx.test.espresso:espresso-accessibility:3.2.0'
    androidTestImplementation 'androidx.test.espresso:espresso-web:3.2.0'
    androidTestImplementation 'androidx.test.espresso.idling:idling-concurrent:3.2.0'
    /* Mockito */
    testImplementation 'org.mockito:mockito-core:2.28.2'
}
repositories {
    mavenCentral()
}
